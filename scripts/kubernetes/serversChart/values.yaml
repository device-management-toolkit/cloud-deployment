#/*********************************************************************
# Copyright (c) Intel Corporation 2020
# SPDX-License-Identifier: Apache-2.0
#**********************************************************************/
# Default values for installServersChart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

images:
  mps: "mps:latest"
  rps: "rps:latest"
  ui: "ui:latest"
  kong: "kong:latest"
  postgresdb: "postgres:10.4"
  pullSecret: "regcred"
backenddb:
  dbUser: "postgresadmin"
  dbPassword: "admin123"
mpsSecretStoreNames:
  web: "mpsweb"
  api: "mpsapi"
  certs: "mpscerts"
  webcerts: "mpswebcerts"
  vault: "vaultaccess"
  creds: "mpscreds"
  mpsrediscreds: "mpsrediscreds"
  session: "session"
rpsSecretStoreNames:
  web: "rpsweb"
  api: "rpsapi"
  rpscerts: "rpscerts"
  vault: "vaultaccess"
mps:
  replicaCount: 2
  https: "true"
  generateCerts: "false"
  logLevel: "silly"
  nodeEnv: "dev"
  serverDeploymentMode: "mps"
  useAllowList: "false"
  mpsPort: "4433"
  mpsUser: "admin"
  useGlobalCredentials: "true"
  enableLogging: "true"
  debug: "true"
  useDB: "true"
  useVault: "true"
  vaultAddr: "http://vault:8200"
  secretsPath: "kv/data/rps/"
  debugLevel: "5"
  mpsPassword: "mpspassword"
  webcertpublic: "mpsweb_cert.crt"
  webcertkey: "mpsweb_cert.key"
  webcertca: "rootCA_mpsweb.crt"
  mpscertpublic: "mps_cert.crt"
  mpscertkey: "mps_cert.key"
  mpscertca: "rootCA_mps.crt"
  vaultkey: "vault-token.txt"
  staticIPAddress: "STATIC_IP_MPS"
  resourceGroupName: "NODE_RESOURCE_GROUP"
  certFormat: "raw"
  sessionEncryptionKey: "session-key.txt"
  networkAdaptor: "eth0"
  proxy: "8100"
  distributedKvPort: "8500"
  distributedKvName: "HashiCorpConsul"
  webProxyPort: "8100"
  mpsConnectionString: "postgresql://postgresadmin:admin123@db:5432/mpsdb"
mps_web:
  replicaCount: 2
  serverDeploymentMode: "web"
  webPort: "3000"
  enableLogging: "true"
  debug: "true"
  debugLevel: "5"
  webAdminUserKey: "adminusername"
  webAdminPasswordKey: "adminuserpassword"
  staticIPAddress: "STATIC_IP_WEB"
  authEnabled: "false"
  mpsrediscreds: "mpsrediscreds"
  redisEnable: "true"
  redisHost: "azureredis"
  redisPort: "6379"
  resourceGroupName: "NODE_RESOURCE_GROUP"
  webConnectionString: "postgresql://postgresadmin:admin123@db:5432/mpsdb"
ui:
  replicaCount: 1
  port: "80"
  staticIPAddress: "STATIC_IP_UI"
  resourceGroupName: "NODE_RESOURCE_GROUP"
kong:
  replicaCount: 1
  webPort: 443
  adminPort: 8001
  database: "off"
  cassandraContactPoints: "kong-database"
  adminListen: "0.0.0.0:8001"
  adminListenSSL: "0.0.0.0:8444"
  nginxDaemon: "off"
  declarativeConfig: "/home/kong/kong.yaml"
  proxyErrorLog: "/dev/stderr"
  proxyAccessLog: "/dev/stdout"
  adminAccessLog: "/dev/stdout"
  adminErrorLog: "/dev/stderr"
  dnsOrder: "LAST,A,CNAME"
rps:
  replicaCount: 2
  logLevel: "silly"
  nodeEnv: "dev"
  vaultAddr: "http://vault:8200"
  secretsPath: "kv/data/rps/"
  rpswsPort: 8080
  rpswebPort: 8081
  webAdminUserKey: "adminusername"
  webAdminPasswordKey: "adminuserpassword"
  webcertpublic: "rps_cert.crt"
  webcertkey: "rps_cert.key"
  rootcacert: "rootCA_rps.crt"
  vaultkey: "vault-token.txt"
  webSocketTLS: "true"
  useRawCerts: "true"
  staticIPAddress: "STATIC_IP_RPS"
  resourceGroupName: "NODE_RESOURCE_GROUP"
  rpsConnectionString: "postgresql://postgresadmin:admin123@db:5432/rpsdb"
  rpsDelayTimer: 12
